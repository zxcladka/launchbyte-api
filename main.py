#!/usr/bin/env python3
"""
WebCraft Pro API - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–æ–¥–∞—Ç–∫—É
–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π backend –¥–ª—è —Å–∞–π—Ç—É –≤–µ–±-—Å—Ç—É–¥—ñ—ó –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
"""

import sys
import time
import logging
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, Request, Response, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.middleware.base import BaseHTTPMiddleware
import uvicorn

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ sys.path
sys.path.append(str(Path(__file__).parent))

from config import settings, validate_environment
from database import (
    init_database, check_database_connection,
    get_database_stats, db_manager
)
from routes import router
from email_service import email_service

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class CustomMiddleware(BaseHTTPMiddleware):
    """–ö–∞—Å—Ç–æ–º–Ω–∏–π middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤."""

    async def dispatch(self, request: Request, call_next):
        # –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞–ø–∏—Ç—É
        request_id = f"req_{int(time.time() * 1000000) % 1000000:06d}"
        request.state.request_id = request_id

        # –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É
        start_time = time.time()
        client_ip = self.get_client_ip(request)

        logger.info(f"[{request_id}] {request.method} {request.url.path} from {client_ip}")

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
            if settings.MAINTENANCE_MODE and request.url.path not in ["/health", "/api/v1/health"]:
                return JSONResponse(
                    status_code=503,
                    content={
                        "error": "Service Unavailable",
                        "message": "The service is temporarily unavailable due to maintenance"
                    }
                )

            response = await call_next(request)

            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–ø–µ–∫–∏
            security_headers = settings.get_security_headers()
            for header, value in security_headers.items():
                response.headers[header] = value

            # –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response.headers["X-Request-ID"] = request_id
            response.headers["X-API-Version"] = settings.VERSION

            # –õ–æ–≥—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
            process_time = time.time() - start_time
            logger.info(f"[{request_id}] Response: {response.status_code} in {process_time:.4f}s")

            return response

        except Exception as e:
            process_time = time.time() - start_time
            logger.error(f"[{request_id}] Error: {str(e)} in {process_time:.4f}s")

            return JSONResponse(
                status_code=500,
                content={
                    "error": "Internal Server Error",
                    "message": "An unexpected error occurred",
                    "request_id": request_id
                }
            )

    def get_client_ip(self, request: Request) -> str:
        """–û—Ç—Ä–∏–º—É—î —Å–ø—Ä–∞–≤–∂–Ω—ñ–π IP –∫–ª—ñ—î–Ω—Ç–∞."""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä—ñ–≤
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip

        return request.client.host if request.client else "unknown"


class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤."""

    def __init__(self, app, calls: int = 60, period: int = 60):
        super().__init__(app)
        self.calls = calls
        self.period = period
        self.clients = {}

    async def dispatch(self, request: Request, call_next):
        client_ip = request.client.host if request.client else "unknown"
        current_time = time.time()

        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
        if current_time % 60 < 1:  # –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            self.cleanup_old_entries(current_time)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
        if client_ip in self.clients:
            requests = self.clients[client_ip]
            recent_requests = [req_time for req_time in requests if current_time - req_time < self.period]

            if len(recent_requests) >= self.calls:
                return JSONResponse(
                    status_code=429,
                    content={
                        "error": "Too Many Requests",
                        "message": f"Rate limit exceeded: {self.calls} requests per {self.period} seconds"
                    }
                )

            self.clients[client_ip] = recent_requests + [current_time]
        else:
            self.clients[client_ip] = [current_time]

        return await call_next(request)

    def cleanup_old_entries(self, current_time: float):
        """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –ø–∞–º'—è—Ç—ñ."""
        for client_ip in list(self.clients.keys()):
            requests = self.clients[client_ip]
            recent_requests = [req_time for req_time in requests if current_time - req_time < self.period * 2]

            if recent_requests:
                self.clients[client_ip] = recent_requests
            else:
                del self.clients[client_ip]


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events –¥–ª—è FastAPI –¥–æ–¥–∞—Ç–∫—É."""
    # Startup
    logger.info("üöÄ Starting WebCraft Pro API...")
    logger.info(f"üîß Environment: {settings.ENVIRONMENT}")
    logger.info(f"üóÑÔ∏è  Database: {settings.DB_NAME} on {settings.DB_HOST}")
    logger.info(f"üë§ Admin: {settings.ADMIN_EMAIL}")

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        init_database()

        # –¢–µ—Å—Ç—É—î–º–æ email –∑'—î–¥–Ω–∞–Ω–Ω—è —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
        if settings.validate_email_config():
            email_connection_ok = await email_service.test_email_connection()
            if email_connection_ok:
                logger.info("‚úÖ Email service connected")
            else:
                logger.warning("‚ö†Ô∏è Email service connection failed")

        logger.info("‚úÖ Application started successfully!")
        logger.info(f"üåê Server available at: http://{settings.HOST}:{settings.PORT}")
        logger.info(f"üìö API Documentation: http://{settings.HOST}:{settings.PORT}/docs")

        # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        db_stats = get_database_stats()
        logger.info(f"üìä Database stats: {db_stats.get('users', 0)} users, {db_stats.get('designs', 0)} designs")

    except Exception as e:
        logger.error(f"‚ùå Failed to initialize application: {e}")
        import traceback
        traceback.print_exc()
        raise

    yield

    # Shutdown
    logger.info("üëã Application shutting down...")


# –í–∞–ª—ñ–¥—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
try:
    validate_environment()
except Exception as e:
    logger.error(f"Environment validation failed: {e}")
    print(f"‚ùå Configuration Error: {e}")
    print("üí° Please check your settings and try again.")
    sys.exit(1)


# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="WebCraft Pro API",
    description="""
    üé® **WebCraft Pro API** - –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π backend –¥–ª—è —Å–∞–π—Ç—É –≤–µ–±-—Å—Ç—É–¥—ñ—ó

    ## –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    - üîê JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ cookie –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
    - üé® –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –¥–∏–∑–∞–π–Ω—ñ–≤
    - üíº –ü–∞–∫–µ—Ç–∏ –ø–æ—Å–ª—É–≥ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –æ–ø–∏—Å–æ–º
    - ‚≠ê –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é
    - üìã –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    - üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
    - üåê –ú—É–ª—å—Ç–∏—è–∑–∏—á–Ω—ñ—Å—Ç—å (UK/EN)
    - üìä –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
    - üìß Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

    ## –ë–µ–∑–ø–µ–∫–∞:
    - Rate limiting
    - CORS –∑–∞—Ö–∏—Å—Ç  
    - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    - SQL injection –∑–∞—Ö–∏—Å—Ç
    - XSS –∑–∞—Ö–∏—Å—Ç
    """,
    version=settings.VERSION,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    openapi_url="/openapi.json" if settings.DEBUG else None,
    lifespan=lifespan
)

# ============ MIDDLEWARE ============

# –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π middleware
app.add_middleware(CustomMiddleware)

# Rate limiting (—Ç—ñ–ª—å–∫–∏ —É –ø—Ä–æ–¥–∞–∫—à–Ω)
if not settings.DEBUG:
    app.add_middleware(
        RateLimitMiddleware,
        calls=settings.RATE_LIMIT_PER_MINUTE,
        period=60
    )

# Gzip —Å—Ç–∏—Å–∫–∞–Ω–Ω—è
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Trusted hosts (—É –ø—Ä–æ–¥–∞–∫—à–Ω)
if settings.is_production():
    trusted_hosts = ["webcraft.pro", "www.webcraft.pro", "api.webcraft.pro"]
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=trusted_hosts)

# CORS
cors_config = settings.get_cors_config()
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_config["allow_origins"],
    allow_credentials=cors_config["allow_credentials"],
    allow_methods=cors_config["allow_methods"],
    allow_headers=cors_config["allow_headers"],
)


# ============ –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–ú–ò–õ–û–ö ============

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–æ–±–Ω–∏–∫ HTTP –ø–æ–º–∏–ª–æ–∫."""
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.url}")

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP {exc.status_code}",
            "message": exc.detail,
            "path": str(request.url.path),
            "timestamp": int(time.time())
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó."""
    logger.warning(f"Validation error: {exc.errors()} - {request.url}")

    return JSONResponse(
        status_code=422,
        content={
            "error": "Validation Error",
            "message": "Invalid request data",
            "details": exc.errors(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(StarletteHTTPException)
async def starlette_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–æ–±–Ω–∏–∫ Starlette HTTP –ø–æ–º–∏–ª–æ–∫."""
    if exc.status_code == 404:
        return JSONResponse(
            status_code=404,
            content={
                "error": "Not Found",
                "message": "The requested resource was not found",
                "path": str(request.url.path)
            }
        )

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP {exc.status_code}",
            "message": exc.detail if hasattr(exc, 'detail') else "An error occurred"
        }
    )


@app.exception_handler(500)
async def internal_server_error_handler(request: Request, exc):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    request_id = getattr(request.state, 'request_id', 'unknown')
    logger.error(f"Internal server error [{request_id}]: {exc}")

    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred" if settings.is_production() else str(exc),
            "request_id": request_id
        }
    )


# ============ –°–¢–ê–¢–ò–ß–ù–Ü –§–ê–ô–õ–ò ============

# –ú–æ–Ω—Ç—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
try:
    app.mount("/uploads", StaticFiles(directory=settings.UPLOAD_DIR), name="uploads")
    logger.info(f"Static files mounted: /uploads -> {settings.UPLOAD_DIR}")
except Exception as e:
    logger.warning(f"Failed to mount static files: {e}")


# ============ –û–°–ù–û–í–ù–Ü –†–û–£–¢–ò ============

@app.get("/", tags=["Root"])
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å."""
    db_status = "connected" if check_database_connection() else "disconnected"

    return {
        "service": "üé® WebCraft Pro API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "status": "healthy" if db_status == "connected" else "unhealthy",
        "database": db_status,
        "documentation": "/docs" if settings.DEBUG else "Available in development mode",
        "timestamp": int(time.time()),
        "features": {
            "authentication": "JWT with cookies",
            "database": "MySQL with migrations",
            "file_upload": "Images with optimization",
            "email": "SMTP notifications",
            "localization": "Ukrainian/English",
            "admin_panel": "Full CRUD operations",
            "rate_limiting": "60 requests/minute",
            "security": "CORS, XSS, CSRF protection"
        }
    }


@app.get("/health", tags=["System"])
async def health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏."""
    checks = {}
    overall_status = "healthy"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try:
        db_connected = check_database_connection()
        checks["database"] = {
            "status": "ok" if db_connected else "error",
            "details": db_manager.get_connection_info() if db_connected else "Connection failed"
        }
        if not db_connected:
            overall_status = "unhealthy"
    except Exception as e:
        checks["database"] = {"status": "error", "details": str(e)}
        overall_status = "unhealthy"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email —Å–µ—Ä–≤—ñ—Å
    try:
        if settings.validate_email_config():
            checks["email"] = {"status": "configured", "details": "SMTP settings are valid"}
        else:
            checks["email"] = {"status": "not_configured", "details": "SMTP settings missing"}
    except Exception as e:
        checks["email"] = {"status": "error", "details": str(e)}

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–æ–≤—É —Å–∏—Å—Ç–µ–º—É
    try:
        upload_path = Path(settings.UPLOAD_DIR)
        if upload_path.exists() and upload_path.is_dir():
            checks["file_system"] = {"status": "ok", "details": f"Upload directory: {upload_path}"}
        else:
            checks["file_system"] = {"status": "error", "details": "Upload directory not found"}
            overall_status = "degraded"
    except Exception as e:
        checks["file_system"] = {"status": "error", "details": str(e)}

    return {
        "status": overall_status,
        "timestamp": int(time.time()),
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "checks": checks
    }


@app.get("/metrics", tags=["System"])
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
    if not settings.ENABLE_METRICS:
        raise HTTPException(status_code=404, detail="Metrics disabled")

    try:
        db_stats = get_database_stats()

        metrics = []

        # Database metrics
        for key, value in db_stats.items():
            if isinstance(value, (int, float)) and key != "error":
                metrics.append(f'webcraft_db_{key} {value}')

        # Application metrics
        metrics.extend([
            f'webcraft_app_version{{version="{settings.VERSION}"}} 1',
            f'webcraft_app_debug{{debug="{settings.DEBUG}"}} {int(settings.DEBUG)}',
            f'webcraft_app_environment{{environment="{settings.ENVIRONMENT}"}} 1'
        ])

        return Response(
            content="\n".join(metrics) + "\n",
            media_type="text/plain"
        )

    except Exception as e:
        logger.error(f"Failed to generate metrics: {e}")
        raise HTTPException(status_code=500, detail="Failed to generate metrics")


@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    """Favicon –¥–ª—è API."""
    return Response(content="", media_type="image/x-icon")


# ============ API –†–û–£–¢–ò ============

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ API —Ä–æ—É—Ç–∏
app.include_router(router, prefix="/api/v1", tags=["API v1"])


# ============ –î–û–î–ê–¢–ö–û–í–Ü –†–û–£–¢–ò ============

@app.get("/api/v1/info", tags=["System"])
async def get_api_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API."""
    return {
        "name": settings.APP_NAME,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "debug": settings.DEBUG,
        "database": {
            "type": "MySQL",
            "name": settings.DB_NAME,
            "host": settings.DB_HOST
        },
        "features": {
            "authentication": True,
            "file_upload": True,
            "email_notifications": settings.validate_email_config(),
            "rate_limiting": True,
            "cors": True
        },
        "limits": {
            "max_file_size": settings.MAX_FILE_SIZE,
            "rate_limit_per_minute": settings.RATE_LIMIT_PER_MINUTE,
            "max_page_size": settings.MAX_PAGE_SIZE
        }
    }


@app.post("/api/v1/test-email", tags=["System"])
async def test_email_endpoint():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ email —Å–µ—Ä–≤—ñ—Å—É (—Ç—ñ–ª—å–∫–∏ –≤ debug —Ä–µ–∂–∏–º—ñ)."""
    if not settings.DEBUG:
        raise HTTPException(status_code=404, detail="Not found")

    if not settings.validate_email_config():
        raise HTTPException(status_code=503, detail="Email service not configured")

    try:
        success = await email_service.test_email_connection()
        return {
            "status": "success" if success else "failed",
            "message": "Email connection test completed",
            "configuration": {
                "smtp_server": settings.SMTP_SERVER,
                "smtp_port": settings.SMTP_PORT,
                "use_tls": settings.SMTP_USE_TLS,
                "from_email": settings.FROM_EMAIL
            }
        }
    except Exception as e:
        logger.error(f"Email test error: {e}")
        raise HTTPException(status_code=500, detail=f"Email test failed: {str(e)}")


# ============ –ó–ê–ü–£–°–ö –î–û–î–ê–¢–ö–£ ============

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É
    uvicorn_config = {
        "app": "main:app",
        "host": settings.HOST,
        "port": settings.PORT,
        "reload": settings.DEBUG,
        "log_level": "info",
        "access_log": True,
    }

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    if settings.is_production():
        uvicorn_config.update({
            "workers": 4,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å worker –ø—Ä–æ—Ü–µ—Å—ñ–≤
            "reload": False,
        })

    logger.info(f"üöÄ Starting server with config: {uvicorn_config}")

    try:
        uvicorn.run(**uvicorn_config)
    except KeyboardInterrupt:
        logger.info("üëã Server stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Failed to start server: {e}")
        sys.exit(1)