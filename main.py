#!/usr/bin/env python3
"""
WebCraft Pro API - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π backend –¥–ª—è —Å–∞–π—Ç–∞ –≤–µ–±-—Å—Ç—É–¥–∏–∏ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
–í–µ—Ä—Å–∏—è: 2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π "–û –Ω–∞—Å"
"""

import sys
import time
import logging
import asyncio
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional

from fastapi import FastAPI, Request, Response, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.status import HTTP_429_TOO_MANY_REQUESTS
import uvicorn

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫ sys.path
sys.path.append(str(Path(__file__).parent))

try:
    from config import settings
    from database import (
        init_database, check_database_connection,
        get_database_stats, db_manager, backup_database,
        cleanup_old_data
    )
    from routes import router
    from email_service import email_service, validate_email_templates
    from utils import get_upload_stats, calculate_storage_usage, clean_old_files
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üí° Make sure all required modules are properly installed and configured")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO if not settings.DEBUG else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('app.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class SecurityMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    async def dispatch(self, request: Request, call_next):
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
        request_id = f"req_{int(time.time() * 1000000) % 1000000:06d}"
        request.state.request_id = request_id

        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self.get_client_ip(request)
        request.state.client_ip = client_ip

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        logger.info(f"[{request_id}] {request.method} {request.url.path} from {client_ip}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            if getattr(settings, 'MAINTENANCE_MODE', False) and request.url.path not in [
                "/health", "/api/v1/health", "/docs", "/openapi.json"
            ]:
                return JSONResponse(
                    status_code=503,
                    content={
                        "error": "Service Unavailable",
                        "message": "The service is temporarily unavailable due to maintenance",
                        "retry_after": 3600  # 1 —á–∞—Å
                    }
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(settings, 'BLOCKED_IPS') and client_ip in settings.BLOCKED_IPS:
                logger.warning(f"[{request_id}] Blocked IP attempted access: {client_ip}")
                return JSONResponse(
                    status_code=403,
                    content={
                        "error": "Access Forbidden",
                        "message": "Your IP address is blocked"
                    }
                )

            response = await call_next(request)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_headers = {
                "X-Content-Type-Options": "nosniff",
                "X-Frame-Options": "DENY",
                "X-XSS-Protection": "1; mode=block",
                "Referrer-Policy": "strict-origin-when-cross-origin",
                "Permissions-Policy": "geolocation=(), microphone=(), camera=()",
                "X-Request-ID": request_id,
                "X-API-Version": settings.VERSION,
                "X-Powered-By": "WebCraft Pro API"
            }

            # –î–æ–±–∞–≤–ª—è–µ–º CSP —Ç–æ–ª—å–∫–æ –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
            if response.headers.get("content-type", "").startswith("text/html"):
                security_headers["Content-Security-Policy"] = (
                    "default-src 'self'; "
                    "script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; "
                    "style-src 'self' 'unsafe-inline'; "
                    "img-src 'self' data: https:; "
                    "font-src 'self' https:; "
                    "connect-src 'self'"
                )

            for header, value in security_headers.items():
                response.headers[header] = value

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            process_time = time.time() - start_time
            logger.info(f"[{request_id}] Response: {response.status_code} in {process_time:.4f}s")

            return response

        except Exception as e:
            process_time = time.time() - start_time
            logger.error(f"[{request_id}] Error: {str(e)} in {process_time:.4f}s")

            return JSONResponse(
                status_code=500,
                content={
                    "error": "Internal Server Error",
                    "message": "An unexpected error occurred",
                    "request_id": request_id
                }
            )

    def get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π IP –∫–ª–∏–µ–Ω—Ç–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip

        cloudflare_ip = request.headers.get("CF-Connecting-IP")
        if cloudflare_ip:
            return cloudflare_ip

        return request.client.host if request.client else "unknown"


class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""

    def __init__(self, app, calls: int = 60, period: int = 60, exclude_paths: Optional[list] = None):
        super().__init__(app)
        self.calls = calls
        self.period = period
        self.clients = {}
        self.exclude_paths = exclude_paths or ["/health", "/metrics", "/favicon.ico"]

    async def dispatch(self, request: Request, call_next):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if request.url.path in self.exclude_paths:
            return await call_next(request)

        client_ip = getattr(request.state, 'client_ip', 'unknown')
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if current_time % 60 < 1:
            self.cleanup_old_entries(current_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if client_ip in self.clients:
            requests = self.clients[client_ip]
            recent_requests = [req_time for req_time in requests if current_time - req_time < self.period]

            if len(recent_requests) >= self.calls:
                logger.warning(f"Rate limit exceeded for IP: {client_ip}")
                return JSONResponse(
                    status_code=HTTP_429_TOO_MANY_REQUESTS,
                    content={
                        "error": "Too Many Requests",
                        "message": f"Rate limit exceeded: {self.calls} requests per {self.period} seconds",
                        "retry_after": self.period
                    },
                    headers={"Retry-After": str(self.period)}
                )

            self.clients[client_ip] = recent_requests + [current_time]
        else:
            self.clients[client_ip] = [current_time]

        return await call_next(request)

    def cleanup_old_entries(self, current_time: float):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏."""
        for client_ip in list(self.clients.keys()):
            requests = self.clients[client_ip]
            recent_requests = [req_time for req_time in requests if current_time - req_time < self.period * 2]

            if recent_requests:
                self.clients[client_ip] = recent_requests
            else:
                del self.clients[client_ip]


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # Startup
    logger.info("üöÄ Starting WebCraft Pro API v2.0...")
    logger.info(f"üîß Environment: {settings.ENVIRONMENT}")
    logger.info(f"üóÑÔ∏è  Database: {settings.DB_NAME} on {settings.DB_HOST}")
    logger.info(f"üë§ Admin: {getattr(settings, 'ADMIN_EMAIL', 'Not configured')}")

    startup_errors = []

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üîç Validating environment configuration...")
        # validate_environment() # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä Initializing database...")
        init_database()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not check_database_connection():
            startup_errors.append("Database connection failed")
        else:
            logger.info("‚úÖ Database connection established")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º email —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        logger.info("üìß Testing email service...")
        if hasattr(settings, 'SMTP_SERVER') and settings.SMTP_SERVER:
            try:
                email_connection_ok = await email_service.test_email_connection()
                if email_connection_ok:
                    logger.info("‚úÖ Email service connected")
                else:
                    logger.warning("‚ö†Ô∏è Email service connection failed")
                    startup_errors.append("Email service not working")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Email service error: {e}")
        else:
            logger.info("‚ÑπÔ∏è  Email service not configured")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º email —à–∞–±–ª–æ–Ω—ã
        logger.info("üìù Validating email templates...")
        template_validation = validate_email_templates()
        invalid_templates = [name for name, result in template_validation.items() if not result['valid']]
        if invalid_templates:
            logger.warning(f"‚ö†Ô∏è Invalid email templates: {invalid_templates}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        logger.info("üìÅ Checking upload directories...")
        upload_dir = Path(settings.UPLOAD_DIR)
        upload_dir.mkdir(parents=True, exist_ok=True)

        for category in ['images', 'documents', 'media', 'other']:
            category_dir = upload_dir / category
            category_dir.mkdir(exist_ok=True)
            (category_dir / 'thumbnails').mkdir(exist_ok=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìà Gathering database statistics...")
        db_stats = get_database_stats()
        logger.info(f"üìä Database stats: {db_stats.get('users', 0)} users, "
                    f"{db_stats.get('designs', 0)} designs, "
                    f"{db_stats.get('team_members', 0)} team members, "
                    f"{db_stats.get('about_content', 0)} about content entries")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        upload_stats = get_upload_stats()
        logger.info(f"üìÅ Upload stats: {upload_stats.get('total_files', 0)} files, "
                    f"{upload_stats.get('total_size_human', '0 B')}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        logger.info("‚öôÔ∏è  Starting background tasks...")
        asyncio.create_task(background_cleanup_task())

        if startup_errors:
            logger.warning(f"‚ö†Ô∏è Application started with warnings: {startup_errors}")
        else:
            logger.info("‚úÖ Application started successfully!")

        logger.info(f"üåê Server available at: http://{settings.HOST}:{settings.PORT}")
        if settings.DEBUG:
            logger.info(f"üìö API Documentation: http://{settings.HOST}:{settings.PORT}/docs")
            logger.info(f"üìã ReDoc: http://{settings.HOST}:{settings.PORT}/redoc")

    except Exception as e:
        logger.error(f"‚ùå Failed to initialize application: {e}")
        import traceback
        traceback.print_exc()
        raise

    yield

    # Shutdown
    logger.info("üëã Application shutting down...")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if getattr(settings, 'AUTO_BACKUP_ON_SHUTDOWN', False):
        logger.info("üíæ Creating shutdown backup...")
        try:
            backup_file = backup_database()
            if backup_file:
                logger.info(f"‚úÖ Shutdown backup created: {backup_file}")
        except Exception as e:
            logger.error(f"‚ùå Failed to create shutdown backup: {e}")

    logger.info("‚úÖ Application shutdown complete")


async def background_cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
    while True:
        try:
            # –ñ–¥–µ–º 1 —á–∞—Å
            await asyncio.sleep(3600)

            logger.info("üßπ Running background cleanup...")

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ email
            cleanup_result = cleanup_old_data(days_old=30)
            if cleanup_result.get('deleted_email_logs', 0) > 0:
                logger.info(f"üóëÔ∏è  Cleaned up {cleanup_result['deleted_email_logs']} old email logs")

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            temp_cleanup = clean_old_files(
                str(Path(settings.UPLOAD_DIR) / 'temp'),
                days_old=1,
                dry_run=False
            )
            if temp_cleanup.get('removed_count', 0) > 0:
                logger.info(f"üóëÔ∏è  Cleaned up {temp_cleanup['removed_count']} old temp files")

        except Exception as e:
            logger.error(f"‚ùå Background cleanup error: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="WebCraft Pro API",
    description="""
    üé® **WebCraft Pro API v2.0** - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π backend –¥–ª—è —Å–∞–π—Ç–∞ –≤–µ–±-—Å—Ç—É–¥–∏–∏

    ## üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ v2.0:
    - üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π** - –ø–æ–ª–Ω—ã–π CRUD –¥–ª—è —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    - üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"** - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –º–∏—Å—Å–∏–∏
    - üîê **–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è** - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    - üìß **–£–ª—É—á—à–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ email —à–∞–±–ª–æ–Ω—ã
    - üõ°Ô∏è **–£—Å–∏–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    ## üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - üîê JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å cookie –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    - üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–∏–∑–∞–π–Ω–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - üíº –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    - ‚≠ê –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
    - üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—á–µ—Ç –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    - üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    - üåê –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (UK/EN)
    - üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    - üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    - üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

    ## üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
    - Rate limiting —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    - CORS –∑–∞—â–∏—Ç–∞ —Å –≥–∏–±–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - SQL injection –∑–∞—â–∏—Ç–∞
    - XSS –∏ CSRF –∑–∞—â–∏—Ç–∞
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤
    - –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

    ## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
    - Health checks —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    - Metrics –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    ## üöÄ API Endpoints:
    - **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: `/api/v1/auth/*`
    - **–î–∏–∑–∞–π–Ω—ã**: `/api/v1/designs/*`
    - **–ö–æ–º–∞–Ω–¥–∞**: `/api/v1/team/*` üÜï
    - **–û –Ω–∞—Å**: `/api/v1/content/about` üÜï
    - **–ü–∞–∫–µ—Ç—ã**: `/api/v1/packages/*`
    - **–û—Ç–∑—ã–≤—ã**: `/api/v1/reviews/*`
    - **–ó–∞—è–≤–∫–∏**: `/api/v1/applications/*`
    - **–ö–æ–Ω—Ç–µ–Ω—Ç**: `/api/v1/content/*`
    - **–§–∞–π–ª—ã**: `/api/v1/upload`, `/api/v1/files/*`
    - **–ê–¥–º–∏–Ω**: `/api/v1/admin/*`
    """,
    version=settings.VERSION,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    openapi_url="/openapi.json" if settings.DEBUG else None,
    lifespan=lifespan,
    contact={
        "name": "WebCraft Pro Support",
        "url": "https://webcraft.pro/contact",
        "email": getattr(settings, 'SUPPORT_EMAIL', 'support@webcraft.pro')
    },
    license_info={
        "name": "Proprietary",
        "url": "https://webcraft.pro/license"
    }
)

# ============ MIDDLEWARE ============

# –î–æ–±–∞–≤–ª—è–µ–º security middleware
app.add_middleware(SecurityMiddleware)

# Rate limiting (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω)
if settings.ENVIRONMENT == "production":
    app.add_middleware(
        RateLimitMiddleware,
        calls=getattr(settings, 'RATE_LIMIT_PER_MINUTE', 60),
        period=60,
        exclude_paths=["/health", "/metrics", "/favicon.ico", "/docs", "/openapi.json"]
    )

# Gzip —Å–∂–∞—Ç–∏–µ
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Trusted hosts (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω)
if settings.ENVIRONMENT == "production":
    trusted_hosts = getattr(settings, 'TRUSTED_HOSTS', ["webcraft.pro", "*.webcraft.pro"])
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=trusted_hosts)

# üîß CORS MIDDLEWARE - –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø LAUNCHBYTE.ORG
logger.info(f"üåê Configuring CORS for origins: {settings.ALLOWED_ORIGINS}")
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,  # ‚Üê –ò–°–ü–û–õ–¨–ó–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó CONFIG.PY
    allow_credentials=settings.CORS_ALLOW_CREDENTIALS,
    allow_methods=settings.CORS_ALLOW_METHODS,
    allow_headers=[
        "Accept",
        "Accept-Language",
        "Content-Language",
        "Content-Type",
        "Authorization",
        "X-Requested-With",
        "X-Request-ID",
        "Cache-Control"
    ],
    expose_headers=["X-Request-ID", "X-API-Version"],
    max_age=600  # –ö—ç—à–∏—Ä—É–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 10 –º–∏–Ω—É—Ç
)


# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ============

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫."""
    request_id = getattr(request.state, 'request_id', 'unknown')
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.url} [{request_id}]")

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP {exc.status_code}",
            "message": exc.detail,
            "path": str(request.url.path),
            "timestamp": int(time.time()),
            "request_id": request_id
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    request_id = getattr(request.state, 'request_id', 'unknown')
    logger.warning(f"Validation error: {exc.errors()} - {request.url} [{request_id}]")

    return JSONResponse(
        status_code=422,
        content={
            "error": "Validation Error",
            "message": "Invalid request data",
            "details": exc.errors(),
            "path": str(request.url.path),
            "request_id": request_id
        }
    )


@app.exception_handler(StarletteHTTPException)
async def starlette_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Starlette HTTP –æ—à–∏–±–æ–∫."""
    request_id = getattr(request.state, 'request_id', 'unknown')

    if exc.status_code == 404:
        return JSONResponse(
            status_code=404,
            content={
                "error": "Not Found",
                "message": "The requested resource was not found",
                "path": str(request.url.path),
                "request_id": request_id
            }
        )

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP {exc.status_code}",
            "message": exc.detail if hasattr(exc, 'detail') else "An error occurred",
            "request_id": request_id
        }
    )


@app.exception_handler(500)
async def internal_server_error_handler(request: Request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    request_id = getattr(request.state, 'request_id', 'unknown')
    logger.error(f"Internal server error [{request_id}]: {exc}")

    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred" if settings.ENVIRONMENT == "production" else str(exc),
            "request_id": request_id,
            "timestamp": int(time.time())
        }
    )


# ============ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ============

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
try:
    upload_path = Path(settings.UPLOAD_DIR)
    if upload_path.exists():
        app.mount("/uploads", StaticFiles(directory=str(upload_path)), name="uploads")
        logger.info(f"Static files mounted: /uploads -> {upload_path}")
    else:
        logger.warning(f"Upload directory not found: {upload_path}")
except Exception as e:
    logger.warning(f"Failed to mount static files: {e}")


# ============ –û–°–ù–û–í–ù–´–ï –†–û–£–¢–´ ============

@app.get("/", tags=["Root"])
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ."""
    db_status = "connected" if check_database_connection() else "disconnected"

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db_stats = get_database_stats() if db_status == "connected" else {}
    upload_stats = get_upload_stats()
    storage_usage = calculate_storage_usage()

    return {
        "service": "üé® WebCraft Pro API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "status": "healthy" if db_status == "connected" else "unhealthy",
        "database": {
            "status": db_status,
            "stats": {
                "users": db_stats.get('users', 0),
                "designs": db_stats.get('designs', 0),
                "team_members": db_stats.get('team_members', 0),  # –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "about_content": db_stats.get('about_content', 0),  # –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "packages": db_stats.get('packages', 0),
                "reviews": db_stats.get('reviews', 0),
                "applications": db_stats.get('quote_applications', 0) + db_stats.get('consultation_applications', 0)
            }
        },
        "storage": {
            "total_files": upload_stats.get('total_files', 0),
            "total_size": upload_stats.get('total_size_human', '0 B'),
            "usage_percentage": storage_usage.get('usage_percentage', 0)
        },
        "cors": {
            "allowed_origins": settings.ALLOWED_ORIGINS,
            "status": "configured"
        },
        "features": {
            "authentication": "JWT with cookies",
            "database": "MySQL with migrations",
            "file_upload": "Images with optimization",
            "email": "SMTP notifications",
            "localization": "Ukrainian/English",
            "admin_panel": "Full CRUD operations",
            "team_management": "Team members CRUD",  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "about_page": "About page content management",  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "password_change": "Secure password updates",  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "rate_limiting": f"{getattr(settings, 'RATE_LIMIT_PER_MINUTE', 60)} requests/minute",
            "security": "CORS, XSS, CSRF protection"
        },
        "documentation": "/docs" if settings.DEBUG else "Available in development mode",
        "timestamp": int(time.time())
    }


@app.get("/health", tags=["System"])
async def health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    checks = {}
    overall_status = "healthy"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db_connected = check_database_connection()
        checks["database"] = {
            "status": "ok" if db_connected else "error",
            "details": db_manager.get_connection_info() if db_connected else "Connection failed"
        }
        if not db_connected:
            overall_status = "unhealthy"
    except Exception as e:
        checks["database"] = {"status": "error", "details": str(e)}
        overall_status = "unhealthy"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º email —Å–µ—Ä–≤–∏—Å
    try:
        if hasattr(settings, 'SMTP_SERVER') and settings.SMTP_SERVER:
            email_test = await email_service.test_email_connection()
            checks["email"] = {
                "status": "ok" if email_test else "error",
                "details": "SMTP connection successful" if email_test else "SMTP connection failed"
            }
        else:
            checks["email"] = {"status": "not_configured", "details": "SMTP settings missing"}
    except Exception as e:
        checks["email"] = {"status": "error", "details": str(e)}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        upload_path = Path(settings.UPLOAD_DIR)
        if upload_path.exists() and upload_path.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            test_file = upload_path / '.write_test'
            try:
                test_file.write_text('test')
                test_file.unlink()
                checks["file_system"] = {
                    "status": "ok",
                    "details": f"Upload directory writable: {upload_path}"
                }
            except Exception:
                checks["file_system"] = {
                    "status": "error",
                    "details": f"Upload directory not writable: {upload_path}"
                }
                overall_status = "degraded"
        else:
            checks["file_system"] = {"status": "error", "details": "Upload directory not found"}
            overall_status = "degraded"
    except Exception as e:
        checks["file_system"] = {"status": "error", "details": str(e)}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    try:
        if db_connected:
            db_stats = get_database_stats()
            new_features_ok = (
                    'team_members' in db_stats and
                    'about_content' in db_stats
            )
            checks["new_features"] = {
                "status": "ok" if new_features_ok else "error",
                "details": {
                    "team_members_table": 'team_members' in db_stats,
                    "about_content_table": 'about_content' in db_stats,
                    "team_members_count": db_stats.get('team_members', 0),
                    "about_content_count": db_stats.get('about_content', 0)
                }
            }
    except Exception as e:
        checks["new_features"] = {"status": "error", "details": str(e)}

    # üÜï CORS –ø—Ä–æ–≤–µ—Ä–∫–∞
    checks["cors"] = {
        "status": "ok",
        "details": {
            "allowed_origins": len(settings.ALLOWED_ORIGINS),
            "launchbyte_configured": "https://launchbyte.org" in settings.ALLOWED_ORIGINS
        }
    }

    return {
        "status": overall_status,
        "timestamp": int(time.time()),
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "uptime_seconds": int(time.time() - getattr(health_check, '_start_time', time.time())),
        "checks": checks
    }


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è uptime
health_check._start_time = time.time()


@app.get("/metrics", tags=["System"])
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus format)."""
    if not getattr(settings, 'ENABLE_METRICS', False):
        raise HTTPException(status_code=404, detail="Metrics disabled")

    try:
        db_stats = get_database_stats()
        upload_stats = get_upload_stats()
        storage_stats = calculate_storage_usage()

        metrics = []

        # Database metrics
        for key, value in db_stats.items():
            if isinstance(value, (int, float)) and key != "error":
                metrics.append(f'webcraft_db_{key} {value}')

        # File metrics
        metrics.extend([
            f'webcraft_files_total {upload_stats.get("total_files", 0)}',
            f'webcraft_files_size_bytes {upload_stats.get("total_size", 0)}',
            f'webcraft_storage_usage_percentage {storage_stats.get("usage_percentage", 0)}'
        ])

        # Application metrics
        metrics.extend([
            f'webcraft_app_version{{version="{settings.VERSION}"}} 1',
            f'webcraft_app_debug{{debug="{settings.DEBUG}"}} {int(settings.DEBUG)}',
            f'webcraft_app_environment{{environment="{settings.ENVIRONMENT}"}} 1',
            f'webcraft_app_uptime_seconds {int(time.time() - getattr(health_check, "_start_time", time.time()))}'
        ])

        # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ "–û –Ω–∞—Å"
        metrics.extend([
            f'webcraft_team_members_total {db_stats.get("team_members", 0)}',
            f'webcraft_team_members_active {db_stats.get("active_team_members", 0)}',
            f'webcraft_about_content_entries {db_stats.get("about_content", 0)}'
        ])

        # CORS –º–µ—Ç—Ä–∏–∫–∏
        metrics.extend([
            f'webcraft_cors_origins_total {len(settings.ALLOWED_ORIGINS)}',
            f'webcraft_cors_launchbyte_configured {int("https://launchbyte.org" in settings.ALLOWED_ORIGINS)}'
        ])

        return Response(
            content="\n".join(metrics) + "\n",
            media_type="text/plain"
        )

    except Exception as e:
        logger.error(f"Failed to generate metrics: {e}")
        raise HTTPException(status_code=500, detail="Failed to generate metrics")


@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    """Favicon –¥–ª—è API."""
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ favicon –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö
    favicon_path = Path(settings.UPLOAD_DIR) / "favicon.ico"
    if favicon_path.exists():
        return FileResponse(favicon_path)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return Response(content="", media_type="image/x-icon")


# ============ API –†–û–£–¢–´ ============

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ API —Ä–æ—É—Ç—ã
app.include_router(router, prefix="/api/v1", tags=["API v1"])


# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–û–£–¢–´ ============

@app.get("/api/v1/info", tags=["System"])
async def get_api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API."""
    return {
        "name": settings.APP_NAME,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "debug": settings.DEBUG,
        "database": {
            "type": "MySQL",
            "name": settings.DB_NAME,
            "host": settings.DB_HOST,
            "charset": "utf8mb4"
        },
        "cors": {
            "allowed_origins": settings.ALLOWED_ORIGINS,
            "allow_credentials": settings.CORS_ALLOW_CREDENTIALS,
            "launchbyte_support": "https://launchbyte.org" in settings.ALLOWED_ORIGINS
        },
        "features": {
            "authentication": True,
            "file_upload": True,
            "email_notifications": hasattr(settings, 'SMTP_SERVER') and bool(settings.SMTP_SERVER),
            "rate_limiting": True,
            "cors": True,
            "team_management": True,  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "about_page_management": True,  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "password_change": True,  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            "security_monitoring": True,
            "auto_backup": getattr(settings, 'AUTO_BACKUP_ENABLED', False)
        },
        "limits": {
            "max_file_size": settings.MAX_FILE_SIZE,
            "max_file_size_human": f"{settings.MAX_FILE_SIZE // (1024 * 1024)}MB",
            "rate_limit_per_minute": getattr(settings, 'RATE_LIMIT_PER_MINUTE', 60),
            "max_page_size": getattr(settings, 'MAX_PAGE_SIZE', 100),
            "allowed_extensions": getattr(settings, 'ALLOWED_EXTENSIONS', [])
        },
        "new_features": {
            "team_management": "Full CRUD operations for team members",
            "about_page": "Content management for About Us page",
            "password_security": "Enhanced password change with notifications",
            "improved_email": "Extended email templates and notifications",
            "enhanced_security": "Improved security middleware and monitoring"
        }
    }


@app.post("/api/v1/test-email", tags=["System"])
async def test_email_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email —Å–µ—Ä–≤–∏—Å–∞ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)."""
    if not settings.DEBUG:
        raise HTTPException(status_code=404, detail="Not found")

    if not hasattr(settings, 'SMTP_SERVER') or not settings.SMTP_SERVER:
        raise HTTPException(status_code=503, detail="Email service not configured")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        success = await email_service.test_email_connection()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É email
        email_stats = email_service.get_email_stats()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        template_validation = validate_email_templates()

        return {
            "status": "success" if success else "failed",
            "message": "Email connection test completed",
            "connection_test": success,
            "configuration": {
                "smtp_server": settings.SMTP_SERVER,
                "smtp_port": getattr(settings, 'SMTP_PORT', 587),
                "use_tls": getattr(settings, 'SMTP_USE_TLS', True),
                "from_email": getattr(settings, 'FROM_EMAIL', '')
            },
            "statistics": email_stats,
            "templates": {
                "total": len(email_service.templates),
                "valid": sum(1 for result in template_validation.values() if result['valid']),
                "invalid": sum(1 for result in template_validation.values() if not result['valid'])
            }
        }
    except Exception as e:
        logger.error(f"Email test error: {e}")
        raise HTTPException(status_code=500, detail=f"Email test failed: {str(e)}")


@app.get("/api/v1/backup", tags=["System"])
async def create_backup_endpoint():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if not settings.DEBUG:
        raise HTTPException(status_code=404, detail="Not found")

    try:
        backup_file = backup_database()
        if backup_file:
            return {
                "status": "success",
                "message": "Backup created successfully",
                "backup_file": backup_file,
                "timestamp": int(time.time())
            }
        else:
            raise HTTPException(status_code=500, detail="Failed to create backup")
    except Exception as e:
        logger.error(f"Backup creation error: {e}")
        raise HTTPException(status_code=500, detail=f"Backup failed: {str(e)}")


# ============ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ============

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    uvicorn_config = {
        "app": "main:app",
        "host": settings.HOST,
        "port": settings.PORT,
        "reload": settings.DEBUG,
        "log_level": "info",
        "access_log": True,
        "use_colors": True,
        "server_header": False,  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        "date_header": True
    }

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    if settings.ENVIRONMENT == "production":
        uvicorn_config.update({
            "workers": getattr(settings, 'WORKERS', 4),
            "reload": False,
            "access_log": getattr(settings, 'ACCESS_LOG', True)
        })

    # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(settings, 'SSL_KEYFILE') and hasattr(settings, 'SSL_CERTFILE'):
        uvicorn_config.update({
            "ssl_keyfile": settings.SSL_KEYFILE,
            "ssl_certfile": settings.SSL_CERTFILE
        })

    logger.info(f"üöÄ Starting server with config: {uvicorn_config}")

    try:
        uvicorn.run(**uvicorn_config)
    except KeyboardInterrupt:
        logger.info("üëã Server stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Failed to start server: {e}")
        sys.exit(1)