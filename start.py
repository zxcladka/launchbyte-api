#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫—É WebCraft Pro API –∑ –ø–æ–≤–Ω–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
"""

import os
import sys
import subprocess
import time
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ sys.path
sys.path.append(str(Path(__file__).parent))


def print_header():
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("=" * 70)
    print("üöÄ WEBCRAFT PRO API STARTUP CHECKER")
    print("=" * 70)


def check_python_version():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–µ—Ä—Å—ñ—é Python."""
    print("üîç Checking Python version...")
    version = sys.version_info
    if version.major != 3 or version.minor < 8:
        print(f"‚ùå Python 3.8+ required, got {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True


def check_env_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å .env —Ñ–∞–π–ª—É."""
    print("üîç Checking .env file...")
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ö†Ô∏è  .env file not found")
        print("üí° Creating .env template...")
        create_env_template()
        return False
    print("‚úÖ .env file found")
    return True


def create_env_template():
    """–°—Ç–≤–æ—Ä—é—î —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª—É."""
    template = """# =============================================================================
# WEBCRAFT PRO - –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–ï–î–û–í–ò–©–ê
# =============================================================================
# –í–ê–ñ–õ–ò–í–û: –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!

# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•
DB_HOST=localhost
DB_PORT=3306
DB_USER=webcraft_user
DB_PASSWORD=webcraft_user
DB_NAME=webcraft_pro

# –ë–ï–ó–ü–ï–ö–ê JWT - –û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ú–Ü–ù–Ü–¢–¨!
SECRET_KEY=CHANGE-THIS-TO-SECURE-SECRET-KEY-256-BITS-MINIMUM
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–† - –û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ú–Ü–ù–Ü–¢–¨!
ADMIN_EMAIL=admin@webcraft.pro
ADMIN_PASSWORD=CHANGE-THIS-PASSWORD
ADMIN_NAME=Administrator

# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–û–î–ê–¢–ö–£
DEBUG=true
HOST=127.0.0.1
PORT=8000
"""
    with open(".env", "w") as f:
        f.write(template)
    print("üìÑ Created .env template - please fill in the values!")


def check_mysql_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL."""
    print("üîç Checking MySQL connection...")
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        from dotenv import load_dotenv
        load_dotenv()

        from config import settings
        from database import check_database_connection

        if check_database_connection():
            print("‚úÖ MySQL connection successful")
            return True
        else:
            print("‚ùå MySQL connection failed")
            print_mysql_troubleshooting()
            return False
    except Exception as e:
        print(f"‚ùå Error checking MySQL: {e}")
        print_mysql_troubleshooting()
        return False


def print_mysql_troubleshooting():
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ä–∞–¥–∏ –ø–æ —É—Å—É–Ω–µ–Ω–Ω—é –ø—Ä–æ–±–ª–µ–º –∑ MySQL."""
    print("\nüîß MySQL Troubleshooting:")
    print("1. Check if MySQL server is running:")
    print("   sudo systemctl status mysql")
    print("2. Check user and database exist:")
    print("   mysql -u root -p")
    print("   SHOW DATABASES;")
    print("   SELECT User, Host FROM mysql.user WHERE User='webcraft_user';")
    print("3. Grant permissions:")
    print("   GRANT ALL PRIVILEGES ON webcraft_pro.* TO 'webcraft_user'@'localhost';")
    print("   FLUSH PRIVILEGES;")


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Python."""
    print("üîç Checking Python dependencies...")
    try:
        import fastapi
        import sqlalchemy
        import pymysql
        import uvicorn
        print("‚úÖ All dependencies installed")
        return True
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("üí° Install with: pip install -r requirements.txt")
        return False


def check_directories():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
    print("üîç Checking directories...")
    directories = ["uploads", "uploads/images", "uploads/documents", "uploads/other"]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)

    print("‚úÖ All directories ready")
    return True


def check_configuration():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é."""
    print("üîç Checking configuration...")
    try:
        from dotenv import load_dotenv
        load_dotenv()

        from config import settings

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        critical_settings = {
            'DB_HOST': settings.DB_HOST,
            'DB_USER': settings.DB_USER,
            'DB_PASSWORD': settings.DB_PASSWORD,
            'DB_NAME': settings.DB_NAME,
            'SECRET_KEY': settings.SECRET_KEY,
            'ADMIN_PASSWORD': settings.ADMIN_PASSWORD
        }

        missing = []
        weak_defaults = []

        for key, value in critical_settings.items():
            if not value:
                missing.append(key)
            elif key == 'SECRET_KEY' and 'CHANGE' in value.upper():
                weak_defaults.append(key)
            elif key == 'ADMIN_PASSWORD' and 'CHANGE' in value.upper():
                weak_defaults.append(key)

        if missing:
            print(f"‚ùå Missing required settings: {', '.join(missing)}")
            return False

        if weak_defaults:
            print(f"‚ö†Ô∏è  Weak default values detected: {', '.join(weak_defaults)}")
            print("üí° Please change default passwords and secret keys!")

        print("‚úÖ Configuration valid")
        return True

    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return False


def run_migrations():
    """–ó–∞–ø—É—Å–∫–∞—î –º—ñ–≥—Ä–∞—Ü—ñ—ó."""
    print("üîç Running database migrations...")
    try:
        from migrate import main as run_migrate
        run_migrate()
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Migration warning: {e}")
        print("üí° Migrations will run automatically on startup")
        return True


def start_server():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä."""
    print("\nüöÄ Starting WebCraft Pro API server...")
    print("=" * 70)

    try:
        import uvicorn
        from main import app
        from config import settings

        uvicorn.run(
            "main:app",
            host=settings.HOST,
            port=settings.PORT,
            reload=settings.DEBUG,
            log_level="info"
        )
    except KeyboardInterrupt:
        print("\nüëã Server stopped by user")
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")
        sys.exit(1)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print_header()

    checks = [
        ("Python Version", check_python_version),
        ("Environment File", check_env_file),
        ("Dependencies", check_dependencies),
        ("Configuration", check_configuration),
        ("Directories", check_directories),
        ("MySQL Connection", check_mysql_connection),
    ]

    print("üîç Running pre-startup checks...\n")

    failed_checks = []

    for check_name, check_func in checks:
        try:
            if not check_func():
                failed_checks.append(check_name)
                print()
        except Exception as e:
            print(f"‚ùå {check_name} check failed: {e}")
            failed_checks.append(check_name)
        print()

    if failed_checks:
        print("‚ùå STARTUP FAILED")
        print(f"Failed checks: {', '.join(failed_checks)}")
        print("\nüí° Please fix the issues above and try again.")
        sys.exit(1)

    print("‚úÖ ALL CHECKS PASSED!")
    print("üéâ Starting server...\n")

    # –ü–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    time.sleep(1)

    start_server()


if __name__ == "__main__":
    main()